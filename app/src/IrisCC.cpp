////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// This file is part of IrisCC, a C++ UI for camera calibration               //
//                                                                            //
// Copyright (C) 2012 Alexandru Duliu                                         //
//                                                                            //
// IrisCC is free software; you can redistribute it and/or                    //
// modify it under the terms of the GNU  General Public License               //
// as published by the Free Software Foundation; either version 3             //
// of the License, or (at your option) any later version.                     //
//                                                                            //
// IrisCC is distributed in the hope that it will be useful,                  //
// but WITHOUT ANY WARRANTY; without even the implied warranty of             //
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              //
// GNU General Public License for more details.                               //
//                                                                            //
// You should have received a copy of the GNU General Public License          //
// along with IrisCC. If not, see <http://www.gnu.org/licenses/>.             //
//                                                                            //
///////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <stdexcept>
#include <cmath>

#include <QFileDialog>
#include <QFileInfo>
#include <QMessageBox>
#include <QPainter>
#include <QPixmap>
#include <QProgressDialog>
#include <QProgressBar>
#include <QStringList>
#include <QGraphicsPixmapItem>

#include "ui_IrisCC.h"
#include "ui_CameraConfig.h"
#include "ui_CameraInfo.h"

#include "ui_ChessboardFinder.h"
#ifdef UCHIYAMARKERS_FOUND
#include <iris/UCHIYAMARKERSFinder.hpp>
#include "ui_UCHIYAMARKERSFinder.h"
#endif
#include "ui_OpenCVSingleCalibration.h"
#include "ui_OpenCVStereoCalibration.h"

#include <IrisCC.hpp>

#include <iris/ChessboardFinder.hpp>
#include <iris/OpenCVSingleCalibration.hpp>
#include <iris/OpenCVStereoCalibration.hpp>


IrisCC::IrisCC(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::IrisCC),
    ui_CameraConfig( new Ui::CameraConfig ),
    ui_CameraInfo( new Ui::CameraInfo ),
    ui_ChessboardFinder( new Ui::ChessboardFinder ),
#ifdef UCHIYAMARKERS_FOUND
    ui_UCHIYAMARKERSFinder( new Ui::UCHIYAMARKERSFinder ),
#endif
    ui_OpenCVSingleCalibration( new Ui::OpenCVSingleCalibration ),
    ui_OpenCVStereoCalibration( new Ui::OpenCVStereoCalibration )
{
    ui->setupUi(this);

    // init finder and calibration
    on_configureFinder();
    on_configureCalibration();

    // connect combo boxes
//    connect( ui->input, SIGNAL(currentChanged(int)), this, SLOT(on_inputChanged(int)) );
//    connect( ui->capture, SIGNAL(clicked(bool)), this, SLOT(on_capture(void)) );

    // camera
    ui_CameraConfig->setupUi( &m_cameraConfigDialog );
    ui_CameraInfo->setupUi( &m_cameraInfoDialog );
    connect( ui->select_camera, SIGNAL(currentIndexChanged(int)), this, SLOT(on_selectCamera(void)) );
    connect( ui->configure_camera, SIGNAL(clicked(bool)), this, SLOT(on_configureCamera(void)) );
    connect( ui->camera_info, SIGNAL(clicked(bool)), this, SLOT(on_cameraInfo(void)) );
    connect( &m_cameraConfigDialog, SIGNAL(accepted(void)), this, SLOT( on_acceptConfigureCamera(void) ) );

    // finder
    connect( ui->select_finder, SIGNAL(currentIndexChanged(int)), this, SLOT(on_configureFinder(void)) );
    connect( ui->configure_finder, SIGNAL(clicked(bool)), this, SLOT(on_configureFinder(void)) );

    // calibration
    connect( ui->select_calibration, SIGNAL(currentIndexChanged(int)), this, SLOT(on_configureCalibration(void)) );
    connect( ui->configure_calibration, SIGNAL(clicked(bool)), this, SLOT(on_configureCalibration(void)) );

    connect( ui->load, SIGNAL(clicked(bool)), this, SLOT(on_load(void)) );
    connect( ui->clear, SIGNAL(clicked(bool)), this, SLOT(on_clear(void)) );
    connect( ui->image_list, SIGNAL(currentRowChanged(int)), this, SLOT(on_detectedImageChanged(int)) );
    connect( ui->erase, SIGNAL(clicked(bool)), this, SLOT(on_erase(void)) );
    connect( ui->calibrate, SIGNAL(clicked(bool)), this, SLOT(on_calibrate(void)) );
    connect( ui->save, SIGNAL(clicked(bool)), this, SLOT(on_save(void)) );

    // init finder dialogs
    m_finderDialogs.push_back( std::shared_ptr<QDialog>() );
    m_finderDialogs.push_back( std::shared_ptr<QDialog>( new QDialog(this) ) );    ui_ChessboardFinder->setupUi( m_finderDialogs.back().get() );
#ifdef UCHIYAMARKERS_FOUND
    m_finderDialogs.push_back( std::shared_ptr<QDialog>( new QDialog(this) ) );    ui_UCHIYAMARKERSFinder->setupUi( m_finderDialogs.back().get() );
#else
    m_finderDialogs.push_back( std::shared_ptr<QDialog>( new QDialog(this) ) );
#endif

    // init calibration dialogs
    m_calibrationDialogs.push_back( std::shared_ptr<QDialog>( new QDialog(this) ) );
    m_calibrationDialogs.push_back( std::shared_ptr<QDialog>( new QDialog(this) ) );   ui_OpenCVSingleCalibration->setupUi( m_calibrationDialogs.back().get() );
    m_calibrationDialogs.push_back( std::shared_ptr<QDialog>( new QDialog(this) ) );   ui_OpenCVStereoCalibration->setupUi( m_calibrationDialogs.back().get() );

    // init opengl
    ui->plot_poses->setWidget( &m_worldPoses );
    Eigen::Matrix4d mv;
    mv << 1, 0, 0, 0,
          0, 0,-1, 0,
          0, 1, 0, 0,
          0, 0, 0, 1;
    m_worldPoses.setMV(mv);

    // init image plot
    ui->plot_image->xAxis->setRange(0, 1);
    ui->plot_image->yAxis->setRange(0, 1);

    // init error plot
    ui->plot_error->xAxis->setRange(-1.5, 1.5);
    ui->plot_error->yAxis->setRange(-1.5, 1.5);
    ui->plot_error->xAxis->setAutoTickStep( false );
    ui->plot_error->yAxis->setAutoTickStep( false );
    ui->plot_error->xAxis->setTickStep( 0.5 );
    ui->plot_error->yAxis->setTickStep( 0.5 );

    // fresh start
    clear();
}


IrisCC::~IrisCC()
{
    delete ui;
    delete ui_CameraConfig;
    delete ui_CameraInfo;
    delete ui_ChessboardFinder;
#ifdef UCHIYAMARKERS_FOUND
    delete ui_UCHIYAMARKERSFinder;
#endif
    delete ui_OpenCVSingleCalibration;
    delete ui_OpenCVStereoCalibration;
}


void IrisCC::calibrate()
{
    try
    {
        // check poses
        if( m_cs.poseCount() == 0 )
            throw std::runtime_error( "IrisCC::update: No Images" );

        // configure finder
        std::shared_ptr<iris::Finder> f;
        switch( ui->select_finder->currentIndex() )
        {
            // none
            case 0:
                throw std::runtime_error("IrisCC::update: No Finder selected.");

            // chessboard
            case 1 :
            {
                ui->configure_finder->setEnabled(true);
                iris::ChessboardFinder* finder = new iris::ChessboardFinder();
                finder->setScale( ui_ChessboardFinder->scale->value() );
                finder->configure( static_cast<size_t>( ui_ChessboardFinder->columns->value() ),
                                   static_cast<size_t>( ui_ChessboardFinder->rows->value() ),
                                   0.001 * ui_ChessboardFinder->square_size->value() );
                finder->setFastCheck( ui_ChessboardFinder->fastCheck->isChecked() );
                finder->setAdaptiveThreshold( ui_ChessboardFinder->adaptiveThreshold->isChecked() );
                finder->setNormalizeImage( ui_ChessboardFinder->normalizeImage->isChecked() );
                finder->setSubpixelCorner( ui_ChessboardFinder->subpixel_corner->isChecked() );
                f = std::shared_ptr<iris::Finder>(finder);
                break;
            }

            // uchiyama
#           ifdef UCHIYAMARKERS_FOUND
            case 2 :
            {
                iris::UCHIYAMARKERSFinder* finder = new iris::UCHIYAMARKERSFinder();
                if( ui_UCHIYAMARKERSFinder->custom_pattern->isChecked() )
                {
                    finder->setScale( ui_UCHIYAMARKERSFinder->scale->value() );
                    finder->configure( ui_UCHIYAMARKERSFinder->points->toPlainText().toStdString() );
                }
                else
                {
                    switch( ui_UCHIYAMARKERSFinder->preset->currentIndex() )
                    {
                        case 0 : // A4 150 dots
                            finder->setScale( 0.000094736800000 );
                            finder->configure( "2700 1800 150 2359 1487 390 718 240 439 1048 667 1931 643 1900 1367 1896 1544 2476 1252 2307 986 530 357 184 1378 2503 1447 2069 709 452 163 1159 1647 632 432 2242 1644 1743 1501 1089 1129 1494 292 356 1154 800 1033 155 1575 1181 1397 663 823 2088 959 529 1392 891 356 1534 681 391 344 618 1539 985 1230 1164 162 2188 384 1319 792 984 953 2074 1399 1345 1166 1503 1061 873 798 1563 939 1604 499 2348 147 788 620 1960 1201 234 669 1966 379 933 1396 1638 188 2387 335 2537 1141 2394 604 2278 483 1309 507 879 1141 836 1307 330 1426 1448 449 730 1368 1159 333 1774 652 1745 795 266 901 2231 1320 2163 253 1742 1023 347 508 524 580 1676 1302 2101 1641 1956 522 1132 1009 1466 1368 2011 1069 1808 912 1370 1573 629 1667 995 227 1184 818 1029 1529 1933 926 487 920 2563 838 130 1130 1471 817 695 327 1840 483 120 1255 1340 920 1217 1121 2387 1350 609 1118 2197 615 498 1594 989 546 243 224 1306 1350 2517 276 1333 168 2368 744 778 180 2523 399 2230 798 428 1038 1853 283 1348 291 769 1636 1917 790 2442 1001 2424 1667 1813 162 1768 1620 1484 1244 1467 149 2431 849 1513 1489 1277 1471 1702 1167 1720 279 1010 380 907 1602 1553 1624 575 228 2030 134 284 1044 2324 1190 348 1619 1163 456 665 571 1875 1053 1271 631 516 1259 605 699 2118 522 2548 553 124 314 1409 703 277 1254 173 991 2044 269 897 141 795 491 2208 1459 2579 170 910 644 612 945 2568 1637 2563 1023 531 795 743 1222" );
                            break;
                        case 1 : // A4 200 dots
                            finder->setScale( 0.0001 );
                            finder->configure( "2700 1800 200 2502 1190 1993 785 1438 708 2412 1567 202 782 1711 1107 1972 538 1059 1305 2402 1358 1274 1628 2339 721 2254 924 1074 1471 196 448 1901 1697 1476 237 1410 1180 878 471 2513 680 2413 919 1915 388 1222 319 435 106 844 983 1910 711 2089 887 1664 170 2237 260 595 206 695 533 984 303 1855 811 1172 1183 1444 1477 2031 303 255 1459 1907 102 251 631 2181 1488 2294 1164 998 952 443 295 1710 1289 2351 203 1994 1025 221 220 1093 610 1342 533 2158 669 1894 996 2475 1042 985 764 1757 1677 1541 1155 952 1330 1583 852 1065 234 1212 569 2571 1434 1700 710 2540 211 2447 327 472 1655 582 887 435 461 2097 183 704 1357 2102 1231 2574 868 1585 550 215 320 141 914 1760 961 1495 931 1292 856 1608 365 1507 403 2074 1358 859 1586 2557 1539 1279 1405 1183 169 137 1474 1408 1601 970 166 2333 571 545 323 1589 689 874 881 1583 1453 610 1485 621 651 834 605 505 1308 1698 523 2432 1458 2500 548 793 201 1807 1222 1170 732 1422 1056 850 1204 1906 1497 1336 169 280 860 2506 1648 312 1020 2263 1307 1363 931 368 1321 1761 1465 2572 1333 107 236 1239 423 917 1109 1940 216 1573 1045 2048 1564 106 1189 159 1349 1222 989 688 1160 593 1055 491 1106 2315 1628 192 1692 1315 1138 1682 1596 1072 1670 1136 414 365 1164 660 397 2182 1036 2062 471 2216 1662 1102 848 1528 113 146 1050 871 771 715 689 419 955 133 595 1919 1158 574 470 2183 357 1834 1328 698 806 330 1644 1818 444 606 1664 1090 114 978 583 1179 1663 546 790 1409 804 1196 1303 1821 342 250 1287 749 1525 1136 1569 1325 693 360 581 1045 465 2383 410 2542 423 1713 377 2102 1679 2567 315 1440 1332 812 1424 2590 1007 441 1438 485 568 1807 639 1129 1088 755 1056 2329 1069 235 1104 1183 1460 2397 1174 2282 1472 326 756 2263 655 1302 1513 310 105 331 1539 2267 481 2297 346 760 353 961 1520 2169 1141 304 417 2056 664 1103 980 1630 952 2447 166 1373 434 1306 1248 924 671 487 699" );
                            break;
                        case 2 : // A3 800 dots
                            finder->setScale( 0.0001 );
                            finder->configure( "3600 2700 800 2343 1712 2620 1734 2078 1453 3431 2511 3365 2453 1947 1149 2529 1205 2632 1622 542 779 593 1201 2854 1613 1328 2288 1700 904 137 1042 809 2536 739 193 95 2155 2996 2142 2813 120 2396 1584 2586 874 1622 2298 3349 1913 1866 645 3012 1501 3222 2610 2059 637 447 1871 1536 2273 3426 292 3117 1294 1839 2340 1781 1549 3449 805 3019 91 351 1360 2095 1308 1242 1955 467 1542 1020 2105 1180 1597 1124 1036 295 1955 1424 2098 1405 327 85 2366 2375 1489 577 206 2562 2451 335 2405 3007 393 636 291 2350 1275 1336 1894 1740 2137 1614 944 1514 703 567 427 2651 1528 530 912 2307 324 3467 101 279 1848 3235 2263 3164 1597 1864 2050 571 2451 1286 1535 492 1094 3026 1833 505 2165 2763 1842 3018 2009 1284 761 1915 1306 1168 1332 2551 2218 2684 2525 3183 1720 2525 698 763 1969 271 345 2984 186 2966 1661 2124 992 219 770 1859 2584 1016 227 2470 2159 967 1373 3239 251 1441 2565 2225 490 822 478 3346 2294 3455 2092 710 1757 897 529 2917 2186 2533 1772 976 1016 1432 1073 667 1521 976 2489 3303 469 2775 959 887 945 2264 2153 581 2044 740 1446 608 2592 447 860 591 1043 812 1103 3175 1186 215 1953 136 835 945 354 1796 1186 1651 820 3301 1378 1628 2618 1631 1877 3372 732 452 533 1267 347 3153 359 155 333 326 946 1900 2449 1294 1443 739 351 1265 257 1485 1839 2790 510 3033 2342 2315 205 2134 2298 427 1316 1720 257 1256 1810 128 1756 1577 493 510 1253 3365 2075 1390 2435 3433 678 1077 2042 274 1466 1019 895 1739 669 2771 2013 2216 206 2846 1819 1990 2155 1501 1122 2945 578 1776 110 2177 1612 2035 357 187 686 661 889 2150 1789 1240 2251 2626 1255 1302 2567 3106 610 378 682 683 1972 1190 319 2278 574 125 1141 1152 2244 2201 772 2613 1409 2448 190 358 2084 853 1507 2795 1391 2788 1190 250 868 2169 1200 1715 1615 2353 723 646 747 1088 614 1176 1692 2205 2545 3061 772 2172 1712 98 214 3144 1096 474 251 1968 1476 1013 2562 2602 2362 2492 2582 336 490 2525 1605 2667 966 3235 679 2740 2280 546 1520 3321 1736 1615 592 919 2567 1587 2090 1414 2331 2168 1482 2803 1686 2491 301 2239 1413 1804 271 1955 1843 2122 451 2020 2238 2296 1851 1129 1839 3178 2130 689 2451 1884 1570 1687 555 360 1827 754 1284 1016 1902 862 1199 2251 2011 1294 111 1644 1269 3427 568 712 430 1253 674 3448 1339 1343 406 3010 1036 2916 2308 1539 2585 2370 973 2199 125 818 2301 1776 1709 1118 1217 406 1618 2581 2579 1965 1981 1992 1647 88 1884 2526 1876 1884 803 2448 1760 238 2372 1933 416 2678 405 1034 1550 2487 1363 2084 2127 2181 1894 243 1028 2692 85 2730 1339 1652 2189 3409 478 2647 1962 3188 513 857 178 104 1395 2595 564 962 1817 1379 1313 2619 1039 1514 1214 2582 248 2672 2130 2583 112 2009 1743 3263 1489 1628 738 1258 1360 835 1660 126 1672 691 2113 3432 2382 897 1915 398 1962 1924 1730 3264 2104 747 2204 1057 1101 1849 1762 1537 292 246 560 641 94 3413 1213 1047 1397 3018 507 1022 1244 2775 2398 2979 300 1695 342 2636 636 2793 803 2876 506 1402 1609 142 2045 859 1761 3082 2428 2111 90 430 2317 3318 631 1389 162 336 2203 745 869 2884 2539 3318 876 1893 1916 3295 1062 2522 2302 257 429 393 2501 3371 2206 2717 1770 464 2577 88 474 2957 821 1509 2109 1869 338 1754 1082 1943 718 3185 174 2768 1577 1436 898 232 2586 1164 838 2550 1970 3491 1253 1103 2446 3273 2430 1820 930 1698 2374 304 179 1193 496 3043 2579 2922 2428 3333 295 849 2100 404 149 2888 342 1334 2070 302 1260 407 999 3509 2218 2436 1907 1498 1561 2322 1086 3194 778 2476 2441 3235 962 1862 518 705 1608 2404 520 2696 525 390 422 1379 667 2347 2495 2637 1878 2686 850 1615 1992 3441 1771 2386 2268 1246 1129 2918 654 667 2312 3468 999 661 597 361 303 1533 581 3409 891 95 965 3140 2270 1441 989 568 1778 2881 1002 785 985 3313 2010 230 1682 2181 2370 3504 478 165 1849 2409 386 444 1416 208 1193 1795 2503 2553 495 528 2296 2406 2080 2236 388 2950 1111 1892 1420 2597 1154 482 1971 2756 256 931 624 939 132 3493 1546 952 2314 1657 470 1488 1369 3495 2306 1637 1431 639 2175 2205 1272 353 2598 769 689 993 536 1097 423 1264 577 3193 1442 1915 2204 2528 419 1269 1627 2374 83 924 745 2027 2462 587 1432 2484 943 140 2540 1784 1903 1405 579 3035 1375 2548 803 1730 430 3124 1857 3485 1111 3501 1981 2050 2014 1730 1986 2997 1302 2794 2606 1578 1514 1211 1500 1311 2163 2769 2100 1032 813 661 1330 2449 1653 2425 838 3065 2237 938 878 2301 461 549 346 1526 165 1614 2527 3196 2518 3011 938 2064 1803 1610 1100 1073 2172 182 2213 356 1532 495 642 3184 1965 1150 244 1390 488 3349 1155 455 1687 2350 1386 299 632 1379 776 3094 891 1368 1792 1317 952 2456 2354 2824 1069 2695 182 686 1047 3326 1826 763 1172 1178 740 2250 1663 2535 1033 2769 351 2466 105 2892 1724 3334 1280 703 1850 2860 2087 2311 1591 210 116 2126 2197 1252 2107 1949 952 2538 1452 1741 1411 308 1706 1999 2546 2096 560 2666 2227 2122 370 1604 397 3083 1679 1062 1758 2343 1193 2221 2242 3100 508 1923 1043 816 2421 2246 676 731 2564 911 2197 3327 1590 1352 258 1851 2154 782 276 2874 781 3300 173 2224 966 904 1277 2939 2050 2454 1104 3435 2616 2875 1980 569 604 1167 2025 202 1540 83 1221 1637 231 2711 1473 1288 2481 1872 222 2062 2596 3266 555 2818 2206 3108 1004 753 1534 1981 2359 3048 1212 294 2498 217 1386 94 392 184 208 1501 419 550 510 1082 732 1852 726 2576 963 1678 1514 1298 502 1484 1944 2739 686 1596 1652 3501 896 2146 651 1282 2370 2450 652 83 700 2457 1257 1211 180 3513 1434 912 1619 2681 1138 1563 1799 1117 934 3437 1649 2404 2605 1797 1281 246 2060 1678 1354 3252 402 2010 512 1279 1230 2859 865 2892 2619 1975 210 1649 97 3100 1777 1155 1922 1016 2259 2060 814 2087 1159 385 1198 2827 634 1142 1425 1441 1706 1562 793 256 2286 2701 2354 1055 157 2918 1539 1771 792 3222 1263 3499 1863 2812 1920 3231 870 607 1905 2101 268 2074 1695 1168 2537 418 2163 1016 2401 2537 2066 2377 1812 3133 1521 83 2479 356 1063 2892 1349 1233 981 474 734 1460 766 782 1798 2079 1584 154 1266 1084 1300 209 945 2253 1134 1779 2234 973 1727 575 1681 1028 346 2111 2476 2611 736 463 380 1382 1471 2973 2494 3344 87 1649 1727 2997 1753 2161 867 3033 662 1112 1516 165 2324 1812 1462 1594 1341 3494 355 166 2441 3495 185 1550 2463 2867 424 3241 1895 787 793 86 1486 1330 1128 206 2134 3057 1576 1456 2174 3129 2576 2203 315 2295 2606 492 1803 1416 1179 2880 1186 868 2020 2289 2430 173 484 3373 218 1735 1788 1461 226 2028 1877 1910 122 828 1366 1596 1180 2606 364 847 354 3040 1115 935 2080 3359 406 3516 2428 2679 2444 1665 1020 2299 2284 2017 1014 2281 802 1122 2328 3119 2046 1958 319 608 2380 1117 2608 3389 982 794 597 2812 2470 524 1615 1938 2082 994 1624 682 1185 2036 1221 556 85 1156 2117 3292 2571 1987 851 2455 1512 726 2370 942 259 2381 257 3035 1916 495 2486 3166 92 980 1124 2710 1646 120 593 1989 107 1380 2226 975 1974 2085 2367 3143 701 1757 2580 3412 1471 2332 1943 847 712 2989 729 1535 1008 1655 2448 630 1114 2916 107 2290 85 3187 2336 3192 1808 90 1315 1494 1449 536 1355 2046 166 2161 2016 288 1577 472 2065 1199 92 477 105 1109 516 340 820 2946 1929 2225 1053 1693 171 211 1110 1971 1368 81 1988 1856 1658 356 1441 1213 2604 3513 672 935 1508 2063 912 1347 1711 3120 1405 3065 176 330 2320 2377 2408 2847 1499 516 2388 1960 612 729 534 1320 840 1501 2370 2253 1770 922 2390 1196 2433 1475 525 864 838 1166 636 1096 1632 812 105 2297 1010 997 695 2168 1119 1782 2412 633 378 1054 991 361 567 3275 785 860 1844 3279 1203 2804 1282 1891 1218 1845 1115 1144 1115 1549 1896 81 1590 2906 214 2527 1687 1411 1998 1291 1043 295 1132 2453 2014 496 996 3422 1997 105 128 1801 1017 2697 1217 2473 575 257 265 641 488 2985 2249 2680 2612 3271 2340 2186 569 626 1590 2945 462 1863 1841 619 968 2341 2175 1783 587 3516 2575 1996 1553 1438 90" );
                            break;
                        case 3 : // A2 800 dots
                            finder->setScale( 0.0001 );
                            finder->configure( "5400 3600 800 3891 2388 663 1430 1141 709 4106 511 3233 1919 2489 3196 3272 520 3524 3336 1502 3021 2429 2631 260 1590 1496 2907 3233 2478 3482 1595 3478 2578 1088 2048 3242 216 1354 1218 1788 354 4936 2291 2643 1625 1475 1793 2415 3026 1513 491 3351 692 183 3501 4962 3299 2373 2530 4853 2310 4863 1658 4753 635 4748 764 526 2346 1024 2664 3755 1297 3897 1837 2707 289 5095 3352 987 1598 4127 3121 1706 1429 1522 831 1082 1492 3607 1195 3729 235 434 2821 1240 871 2740 870 1676 2843 4434 2326 3955 576 1002 398 1065 159 4244 3052 3132 2710 4301 2405 1336 2937 2600 2058 4769 3043 5221 2656 5123 1638 560 2193 4170 2238 5101 743 1206 1861 3401 1225 2686 1286 3589 2500 2971 3508 1612 605 3567 187 751 1542 3005 2999 231 2703 3722 2500 3883 1343 3220 1782 4450 179 1173 3021 3491 2403 2798 491 4135 3015 3648 2587 1082 3514 1646 1705 3354 2847 4048 2803 3542 1465 3258 344 2034 2513 1590 2590 4791 165 4428 275 2132 3219 4914 679 350 1409 4681 2428 4552 2698 4652 1848 833 2212 2942 497 4426 2774 3132 2445 4415 1454 3934 159 1785 2116 2261 2332 2911 1633 4156 2489 1462 2753 1396 2406 3422 1900 2310 2619 457 2257 2519 1518 5201 3109 2827 641 1457 935 2690 1160 1650 3010 3911 780 5134 907 2777 353 2479 952 4023 1361 1167 2662 2493 657 3024 1102 3623 2404 4249 2025 5244 2885 2141 1997 5078 136 3872 1220 1831 2500 2608 3480 5299 3100 3453 1102 1760 214 2153 1073 3098 3439 4218 1785 803 1476 172 537 1749 587 3419 1712 5104 465 2695 1432 984 1011 1746 1350 2893 2694 4390 2866 4407 458 703 2194 529 3152 539 853 3605 3433 2504 3479 4313 769 3226 1343 4142 346 1556 2438 623 3276 1252 3185 3289 84 899 269 2774 2195 913 1674 4892 3210 1598 3259 388 1098 3022 1673 1134 1200 2703 1021 4327 2662 2621 660 1600 2215 5264 1484 2558 1878 4241 2735 3151 760 1049 2504 245 2530 3217 3499 4105 2699 4939 1075 1979 1654 3160 1514 895 1812 3049 1885 4862 2654 4352 1982 2468 2113 814 1884 3931 2535 2479 2978 1500 687 5137 3273 1443 3187 1206 216 4576 939 5224 3311 1844 1452 2531 1432 2384 1582 4455 1995 1495 1008 1569 1770 1986 969 356 129 416 1233 4640 105 4464 1129 4936 1578 936 674 5094 1872 735 3086 1851 893 2313 3370 347 2382 1282 2590 1499 2035 3385 2733 4271 1147 1274 2764 1183 1342 5144 2057 1577 1345 710 1319 1360 552 4326 283 4206 1343 4655 3387 2137 3019 387 1640 271 1369 2356 363 473 1646 408 3257 5088 2314 975 2980 3688 1556 4564 3051 116 283 4259 2596 4454 3116 3908 959 4942 2380 518 247 5140 2544 1291 2038 222 780 1376 1769 3205 1591 4672 683 882 1206 2351 764 303 3430 1417 471 244 2782 417 2558 1944 626 288 2002 580 1822 3430 3363 956 900 323 703 4961 219 3535 2281 513 1879 3659 761 306 1214 5310 2551 2936 921 2400 3500 4514 433 3032 348 3798 3289 1674 2298 790 1000 5274 354 3140 2800 1353 904 1324 3030 4801 1149 4951 590 3826 2222 1892 159 3781 1601 204 1205 4116 1154 2568 2231 1882 1770 810 2618 4374 1035 2106 2680 2820 1335 1494 2629 1369 2767 4284 1624 4649 2791 2994 3281 663 1031 4512 1868 2620 878 3238 2892 3645 1884 4888 389 474 3418 2394 2147 3328 3129 1789 137 872 2872 5294 2769 3412 2303 1972 2438 3752 724 2229 1860 3378 2930 3367 3011 1045 2277 4820 1493 2227 1380 827 1122 3466 227 4566 596 3814 2483 4659 877 4496 2250 4363 1384 2619 1232 4856 3466 2998 2636 4713 1712 3524 3104 3074 2210 1760 1849 471 89 4866 600 2478 186 5272 2013 3306 2416 3860 3084 3576 900 4088 3398 3808 2063 5174 1517 3523 2705 957 140 3358 2112 1560 1917 4523 1951 2339 1110 4416 2225 2961 746 2842 173 274 165 3770 3408 3334 1736 3621 1280 2440 1924 5007 861 4182 575 3079 3276 4272 1047 1316 321 371 2093 3529 2060 2588 3338 4549 1359 3723 2810 204 3319 251 856 1273 985 933 764 2674 2747 293 1076 4530 1721 2671 2865 2200 801 329 317 4645 2902 1186 627 1087 1077 1828 2740 3601 507 1091 628 4055 667 188 155 758 351 1945 506 4501 877 3154 2263 1434 2840 1812 695 1209 1745 4070 2583 3531 3009 1938 1108 5250 1098 4495 3241 2610 184 2915 1424 4212 1949 969 2501 1442 560 2580 293 3583 2908 4018 1188 2973 657 2403 435 3400 605 4895 1978 4127 771 1519 1439 832 567 1676 685 1442 1309 3153 1704 1296 1097 4620 1697 4421 704 2710 445 3502 1293 535 350 5095 2462 3924 1502 5084 3056 4872 763 5086 989 2945 1707 2035 2248 3046 2009 1861 3240 3448 2100 377 392 2222 1127 3626 2168 4216 2347 3955 865 4585 2150 3873 1069 2786 3013 1591 2879 1786 3141 2405 1262 2987 2281 177 2461 1292 2341 3386 245 1613 128 3027 107 2884 1517 5309 1269 2153 1556 2710 1852 1093 2206 4375 874 1248 2429 3932 1922 2345 1202 4933 478 1728 2940 3368 3229 892 3180 1344 1355 1463 2121 2694 1934 2443 3283 590 573 1419 1571 4025 3299 4728 1393 3716 1738 4583 1501 4487 1496 3845 514 330 2726 1287 170 3308 2192 2350 2755 4766 2915 133 1396 4601 1247 1071 2882 2360 3154 3954 2885 2711 194 5293 454 1010 1826 1969 2081 3107 1811 1358 252 4098 1616 4459 3012 2641 385 4135 2388 5052 3179 1147 2933 2892 3466 4299 3189 4701 3198 3424 2218 3670 2738 4706 2711 669 775 4567 2782 5179 573 1638 956 3542 1959 859 3268 726 640 589 3050 2843 1766 4385 1652 199 3202 1618 1444 391 562 99 1600 2246 2192 2708 2092 2516 1704 1828 3363 84 359 1612 3085 411 790 4720 2255 4488 96 1536 1137 1594 2790 3520 621 2747 101 3583 816 2855 3279 3717 1032 3956 2611 5312 2944 5193 1374 1952 2616 5077 3491 1934 1436 3311 2017 3088 3103 1709 3191 3041 1535 1986 3322 5187 1768 4029 2655 5136 2863 2528 375 1791 832 2667 2455 1012 1138 629 178 2082 1496 2167 659 3401 1431 5248 1673 2475 1814 3892 389 1266 1611 2504 267 4847 1780 2273 260 2193 2059 1714 1243 2070 2900 3331 829 1861 2970 2817 3161 4802 252 4185 1699 921 2681 5305 2297 3146 590 2139 952 2248 1223 1210 2238 452 1409 663 308 280 2083 2282 3229 2527 2533 352 1951 4979 2769 990 3360 1828 2287 1117 3408 1221 2104 3045 2793 2069 199 2915 813 159 2294 2261 3471 1052 3097 743 2669 1876 2004 3930 1421 898 2039 3332 1023 5305 3249 3909 3181 4305 2090 2962 175 384 3361 5051 1109 3737 103 2208 885 1966 3092 1764 498 2137 2590 4196 2133 4615 440 921 3509 439 194 1817 1926 4725 1498 2010 2007 4563 1085 5157 262 2785 1612 725 1238 288 2239 3783 3146 4467 3507 443 3057 1842 1668 4432 2127 452 887 4375 2986 4230 1249 4433 2517 4345 1777 4580 725 4661 3049 3077 2535 4191 435 1375 2608 1122 2811 1164 1579 5275 908 2922 2893 1634 1134 384 1770 3917 1658 1061 1727 1888 354 4702 2974 3748 1954 529 1532 4771 550 3931 3039 3809 155 358 1856 4389 3441 3256 3192 1384 686 4196 3246 4582 2545 4780 422 4575 3292 2202 176 240 2884 1918 2300 2344 871 1540 1687 2290 2538 1040 479 4948 1828 1664 2673 4252 359 1439 1966 1126 276 1014 588 1715 2585 2805 2394 4682 229 826 3376 3643 2961 5259 1866 2274 2994 2040 1601 3777 339 2784 1036 702 3463 862 880 183 367 671 2754 285 983 1977 316 499 474 1223 3315 5187 1928 416 2918 3510 2808 5068 360 1242 416 597 1718 1271 1927 4518 2951 4111 1823 5196 1179 1074 1274 4167 964 1573 297 3825 2310 4773 2504 3945 2203 3127 2112 4733 3407 4908 1391 2156 295 2312 1817 93 3367 84 2721 3315 2626 3352 442 955 2350 2468 2388 2311 2871 3789 3033 1498 123 1981 2862 91 935 2983 1280 4339 679 1750 2455 2374 273 162 1910 3821 1494 1691 303 3767 943 3572 3514 2657 2185 4547 291 473 1016 335 3056 1889 3444 2799 2556 2073 2406 2646 1511 2271 107 2708 3295 1142 2476 4828 944 1177 2548 958 1460 1434 771 4986 1913 2751 3101 2185 1749 2894 2151 3285 1214 111 130 643 2535 372 2223 2936 1879 4366 1303 1405 2039 3626 425 1978 1291 2842 1681 2440 595 4735 2126 1901 1330 2600 1779 142 1016 5126 1319 117 3004 2811 2046 525 3315 849 336 3669 1477 2541 491 3997 2012 3824 2623 1826 1284 510 2476 617 3393 136 2643 1291 794 2463 1168 869 2788 544 3505 3606 1657 1458 3484 3211 2156 1675 2168 246 2975 449 2636 3657 3258 1511 1521 5150 2167 2090 517 585 2610 1682 1579 3618 287 527 2908 1905 1577 3566 1365" );
                            break;
                        case 4 : // A2 1600 dots
                            finder->setScale( 0.0001 );
                            finder->configure
                            break;
                        default:
                            throw std::runtime_error("IrisCC::update: UCHIYAMARKERS, unknown preset.");
                    }
                }
                f = std::shared_ptr<iris::Finder>(finder);
                break;
            }
#           endif

            // not supported finder
            default:
                throw std::runtime_error("IrisCC::update: Finder not supported.");
        }

        // configure calibration
        std::shared_ptr<iris::CameraCalibration> cc;
        switch( ui->select_calibration->currentIndex() )
        {
            // none
            case 0 :
                throw std::runtime_error("IrisCC::update: No Calibration selected.");

            // OpenCV
            case 1 :
            {
                iris::OpenCVSingleCalibration* calib = new iris::OpenCVSingleCalibration();
                calib->setFixPrincipalPoint( ui_OpenCVSingleCalibration->fixed_principal_point->isChecked() );
                calib->setFixAspectRatio( ui_OpenCVSingleCalibration->fixed_aspect_ratio->isChecked() );
                calib->setTangentialDistortion( ui_OpenCVSingleCalibration->tangential_distortion->isChecked() );
                calib->setIntrinsicGuess( static_cast<size_t>( ui_OpenCVSingleCalibration->intrinsic_guess->isChecked() ) );
                calib->setMinCorrespondences( static_cast<size_t>( ui_OpenCVSingleCalibration->minCorrespondences->value() ) );
                cc = std::shared_ptr<iris::CameraCalibration>( calib );
                break;
            }

            // OpenCV Stereo
            case 2 :
            {
                iris::OpenCVStereoCalibration* calib = new iris::OpenCVStereoCalibration();
                calib->setFixPrincipalPoint( ui_OpenCVStereoCalibration->fixed_principal_point->isChecked() );
                calib->setFixAspectRatio( ui_OpenCVStereoCalibration->fixed_aspect_ratio->isChecked() );
                calib->setTangentialDistortion( ui_OpenCVStereoCalibration->tangential_distortion->isChecked() );
                calib->setRelativeToPattern( ui_OpenCVStereoCalibration->relative_to_pattern->isChecked() );
                calib->setSameFocalLength( ui_OpenCVStereoCalibration->same_focal_length->isChecked() );
                calib->setFixIntrinsic( static_cast<size_t>( ui_OpenCVStereoCalibration->fix_intrinsic->isChecked() ) );
                calib->setIntrinsicGuess( static_cast<size_t>( ui_OpenCVStereoCalibration->intrinsic_guess->isChecked() ) );
                calib->setMinCorrespondences( static_cast<size_t>( ui_OpenCVStereoCalibration->minCorrespondences->value() ) );
                cc = std::shared_ptr<iris::CameraCalibration>( calib );
                break;
            }

            // not supported finder
            default:
                throw std::runtime_error("IrisCC::update: Calibration not supported.");
        }

        // run the calibration
        cc->setFinder(f);
        cc->calibrate( m_cs );

        // update the error plot
        updateImageList();
        updateErrorPlot();
        updatePosesPlot();
        updateImage( ui->image_list->currentRow() );
    }
    catch( std::exception &e )
    {
        critical( e.what() );
    }
}


void IrisCC::updateImageList()
{
    // init stuff
    int currentRow =  ui->image_list->currentRow();
    ui->image_list->clear();
    m_poseIndices.clear();

    // run over all camera poses
    for( auto camIt=m_cs.cameras().begin(); camIt != m_cs.cameras().end(); camIt++ )
    {
        for( size_t p=0; p<camIt->second.poses.size(); p++ )
        {
            ui->image_list->addItem( QString( camIt->second.poses[p].name.c_str() ) );
            m_poseIndices.push_back( camIt->second.poses[p].id );

            if( camIt->second.poses[p].rejected )
                ui->image_list->item( ui->image_list->count() -1 )->setBackgroundColor( QColor( 255, 128, 128 ) );
        }
    }

    // set the current row
    if( currentRow < 0 )
    {
        if( ui->image_list->count() > 0 )
            ui->image_list->setCurrentRow( 0 );
        else
            ui->image_list->setCurrentRow( currentRow );
    }
    else
    {
        if( ui->image_list->count() > 0 && currentRow < ui->image_list->count() )
            ui->image_list->setCurrentRow( currentRow );
        else if( ui->image_list->count() > 0 )
            ui->image_list->setCurrentRow( 0 );
        else
            ui->image_list->setCurrentRow( -1 );
    }
}


void IrisCC::updateErrorPlot()
{
    // init stuff
    double range = 1.5;

    // clear the plot
    ui->plot_error->clearGraphs();
    ui->plot_error->clearPlottables();

    // run over all camera poses
    for( auto camIt=m_cs.cameras().begin(); camIt != m_cs.cameras().end(); camIt++ )
    {
        // update error
        if( camIt->second.error > range )
            range = camIt->second.error;

        // run over all poses of the camera
        for( size_t p=0; p<camIt->second.poses.size(); p++ )
        {
            if( !camIt->second.poses[p].rejected )
            {
                // update more stuff
                const iris::Pose_d& pose = camIt->second.poses[p];
                auto graph = ui->plot_error->addGraph();

                // generate color
                QColor col;
                double l  = static_cast<double>(p)/static_cast<double>(camIt->second.poses.size());
                col.setHslF( 0.5843, 1.0, 0.3 + 0.4*l );

                // run over the points
                for( size_t i=0; i<pose.points2D.size(); i++ )
                    graph->addData( pose.projected2D[i](0) - pose.points2D[i](0),
                                    pose.projected2D[i](1) - pose.points2D[i](1) );

                // plot the detected points
                graph->setPen( col );
                graph->setLineStyle(QCPGraph::lsNone);
                graph->setScatterStyle(QCPGraph::ssPlus);
                graph->setScatterSize(4);
            }
        }
    }

    // draw current camera
    if( m_cs.hasCamera( getCameraId( ui->select_camera->currentIndex() ) ) )
    {
        // run over all poses of the camera
        const iris::Camera_d& cam = m_cs.camera( getCameraId( ui->select_camera->currentIndex() ) );
        for( size_t p=0; p<cam.poses.size(); p++ )
        {
            if( !cam.poses[p].rejected )
            {
                // update more stuff
                const iris::Pose_d& pose = cam.poses[p];
                auto graph = ui->plot_error->addGraph();

                // generate color
                QColor col;
                double l  = static_cast<double>(p)/static_cast<double>(cam.poses.size());
                col.setHslF( 1.0, 1.0, 0.3 + 0.4*l );

                // run over the points
                for( size_t i=0; i<pose.points2D.size(); i++ )
                    graph->addData( pose.projected2D[i](0) - pose.points2D[i](0),
                                    pose.projected2D[i](1) - pose.points2D[i](1) );

                // plot the detected points
                graph->setPen( col );
                graph->setLineStyle(QCPGraph::lsNone);
                graph->setScatterStyle(QCPGraph::ssPlus);
                graph->setScatterSize(4);
            }
        }
    }

    // draw the current pose
    if( m_cs.hasPose( getPoseId( ui->image_list->currentRow() ) ) )
    {
        const iris::Pose_d& pose = m_cs.pose( getPoseId( ui->image_list->currentRow() ) );
        if( !pose.rejected )
        {
            // points background
            auto graphBg = ui->plot_error->addGraph();
            for( size_t i=0; i<pose.points2D.size(); i++ ) graphBg->addData( pose.projected2D[i](0) - pose.points2D[i](0), pose.projected2D[i](1) - pose.points2D[i](1) );
            graphBg->setPen( QPen( QBrush( QColor( Qt::black ) ), 3 ) );
            graphBg->setLineStyle(QCPGraph::lsNone);
            graphBg->setScatterStyle(QCPGraph::ssPlus);
            graphBg->setScatterSize(6);

            // points
            auto graph = ui->plot_error->addGraph();
            for( size_t i=0; i<pose.points2D.size(); i++ ) graph->addData( pose.projected2D[i](0) - pose.points2D[i](0), pose.projected2D[i](1) - pose.points2D[i](1) );
            graph->setPen( QPen( QBrush( QColor( 115, 210, 22 ) ), 1.5 ) );
            graph->setLineStyle(QCPGraph::lsNone);
            graph->setScatterStyle(QCPGraph::ssPlus);
            graph->setScatterSize(5);
        }
    }

    // update the range
    ui->plot_error->xAxis->setRange(-range, range);
    ui->plot_error->yAxis->setRange(-range, range);

    // update the tick size
    double ts = 1.0;
    while((ts * 10.0) < range)
        ts *= 10.0;
    ui->plot_error->xAxis->setTickStep( ts*0.5 );
    ui->plot_error->yAxis->setTickStep( ts*0.5 );

    // redraw
    ui->plot_error->replot();
}


void IrisCC::updateImage( int row )
{
    try
    {
        // init the plot
        ui->plot_image->clearGraphs();
        ui->plot_image->clearPlottables();
        ui->plot_image->setAxisBackground( QPixmap() );
        ui->plot_image->replot();

        // check if there are any images
        if( m_cs.poseCount() == 0 )
            return;

        // check which index this is
        if( row < 0 || row >= m_cs.poseCount() )
            row = 0;

        // get the image
        const iris::Pose_d pose = m_cs.pose( m_poseIndices[row] );
        const cimg_library::CImg<uint8_t>& image = *pose.image;

        // convert image to Qt
        QImage imageQt( image.width(), image.height(), QImage::Format_RGB888 );
        for( int y=0; y<image.height(); y++ )
        {
            for( int x=0; x<image.width(); x++ )
            {
                QColor col( (255+ image(x,y,0,0)) / 2,
                            (255+ image(x,y,0,1)) / 2,
                            (255+ image(x,y,0,2)) / 2 );
                imageQt.setPixel( x, y, col.rgb() );
            }
        }

        // set the images
        ui->plot_image->setAxisBackground(QPixmap::fromImage(imageQt), true, Qt::IgnoreAspectRatio );
        ui->plot_image->xAxis->setRange(0, imageQt.width() );
        ui->plot_image->yAxis->setRange(0, imageQt.height() );

        // draw the detected points
        if( !pose.rejected )
        {
            // get the pose
            const iris::Pose_d& pose = m_cs.pose( getPoseId(row) );

            // copy the data
            double height = static_cast<double>(imageQt.height());
            for( size_t i=0; i<pose.points2D.size(); i++ )
            {
                // get the color hue
                double hue = static_cast<double>(3*pose.pointIndices[i])/static_cast<double>(4*pose.pointsMax);

                // plot the background of detected points
                QCPGraph* detectedBg = ui->plot_image->addGraph();
                detectedBg->addData( pose.points2D[i](0), height - pose.points2D[i](1) );
                QColor detectedBgCol;
                detectedBgCol.setHslF( hue, 0.8, 0.8 );
                detectedBg->setPen( QPen( QBrush( detectedBgCol ), 3 ) );
                detectedBg->setLineStyle(QCPGraph::lsNone);
                detectedBg->setScatterStyle(QCPGraph::ssPlus);
                detectedBg->setScatterSize(12);

                // plot the detected points
                QCPGraph* detected = ui->plot_image->addGraph();
                detected->addData( pose.points2D[i](0), height - pose.points2D[i](1) );
                QColor detectedCol;
                detectedCol.setHslF( hue, 0.8, 0.3 );
                detected->setPen( QPen( QBrush( detectedCol ), 1 ) );
                detected->setLineStyle(QCPGraph::lsNone);
                detected->setScatterStyle(QCPGraph::ssPlus);
                detected->setScatterSize(12);

                // plot the reprojected points
                QCPGraph* projected = ui->plot_image->addGraph();
                projected->addData(pose.projected2D[i](0), height - pose.projected2D[i](1));
                QColor projectedCol;
                projectedCol.setHslF( hue, 0.8, 0.6 );
                projected->setPen( QPen( QBrush( projectedCol ), 1.5 ) );
                projected->setLineStyle(QCPGraph::lsNone);
                projected->setScatterStyle(QCPGraph::ssCircle);
                projected->setScatterSize(8);
            }
        }

        // redraw
        ui->plot_image->replot();
    }
    catch( std::exception &e )
    {
        critical( e.what() );
    }
}


void IrisCC::updatePosesPlot()
{
    // init stuff
    std::vector<Eigen::Matrix4d> RTs;
    std::vector<Eigen::Vector3d> points3D;
    std::vector<Eigen::Vector4d> colors;
    double alphaInc = static_cast<double>(1) / static_cast<double>(m_cs.poseCount());
    m_worldPoses.clear();

    // run over all camera poses
    for( auto camIt=m_cs.cameras().begin(); camIt != m_cs.cameras().end(); camIt++ )
        for( size_t p=0; p<camIt->second.poses.size(); p++ )
            if( !camIt->second.poses[p].rejected )
            {
                // init alpha values
                if( points3D.size() == 0 )
                {
                    points3D.resize( camIt->second.poses[p].pointsMax );
                    colors.resize( camIt->second.poses[p].pointsMax, Eigen::Vector4d::Zero() );
                }

                // get the transformation of the pose
                Eigen::Affine3d trans(camIt->second.poses[p].transformation);
                trans = trans.inverse();
                Eigen::Matrix4d rt = trans.matrix();
                RTs.push_back( rt );

                // get the points in this pose
                for( size_t k=0; k<camIt->second.poses[p].points3D.size(); k++ )
                {
                    double hue = static_cast<double>(3*camIt->second.poses[p].pointIndices[k])/static_cast<double>(4*camIt->second.poses[p].pointsMax);
                    double alpha = colors[camIt->second.poses[p].pointIndices[k]](3) + alphaInc;

                    QColor col;
                    col.setHslF( hue, 0.8, 0.4 );

                    points3D[camIt->second.poses[p].pointIndices[k]] = camIt->second.poses[p].points3D[k];
                    colors[camIt->second.poses[p].pointIndices[k]] = Eigen::Vector4d( col.redF(), col.greenF(), col.blueF(), alpha );
                }
            }

    // update widget
    if( RTs.size() > 0 )
    {
        ui->plot_poses->update();
        m_worldPoses.setLineWidth( 1 );
        m_worldPoses( RTs, nox::plot<double>::CS | nox::plot<double>::Layer0 );
        m_worldPoses.setPointSize( 5 );
        m_worldPoses( points3D, colors, nox::plot<double>::Pos | nox::plot<double>::Transparent | nox::plot<double>::Center | nox::plot<double>::Layer0 );
        ui->plot_poses->update();
    }
}


void IrisCC::updatePosesPlotCurrent()
{
    m_worldPoses.clear( nox::plot<double>::Layer1 );

    // draw the current pose
    if( m_cs.hasPose( getPoseId( ui->image_list->currentRow() ) ) )
    {
        const iris::Pose_d& pose = m_cs.pose( getPoseId( ui->image_list->currentRow() ) );
        if( !pose.rejected )
        {
            m_worldPoses.setLineWidth( 3 );
            Eigen::Affine3d trans( pose.transformation);
            trans = trans.inverse();
            m_worldPoses( trans.matrix(), nox::plot<double>::CS | nox::plot<double>::Layer1 );
            ui->plot_poses->update();
        }
    }

}


void IrisCC::updateCameraList()
{
    // init stuff
    int currentRow =  ui->select_camera->currentIndex();
    ui->select_camera->clear();

    // run over all cameras and add their names
    for( auto camIt=m_cs.cameras().begin(); camIt != m_cs.cameras().end(); camIt++ )
        ui->select_camera->addItem( QString("Camera: \"") + QString::number(camIt->first) + QString("\"") );

    // set the current row
    if( currentRow < 0 )
    {
        if( ui->select_camera->count() > 0 )
            ui->select_camera->setCurrentIndex( 0 );
        else
            ui->select_camera->setCurrentIndex( currentRow );
    }
    else
    {
        if( ui->select_camera->count() > 0 && currentRow < ui->select_camera->count() )
            ui->select_camera->setCurrentIndex( currentRow );
        else if( ui->select_camera->count() > 0 )
            ui->select_camera->setCurrentIndex( 0 );
        else
            ui->select_camera->setCurrentIndex( -1 );
    }
}


void IrisCC::critical( const std::string& message )
{
    ui->statusBar->showMessage( QString( message.c_str() ), 5000 );
    std::cerr << message << std::endl;
    QMessageBox::critical(this, "Error", QString( message.c_str() ) );
}


void IrisCC::warning( const std::string& message )
{
    ui->statusBar->showMessage( QString( message.c_str() ), 5000 );
    std::cout << message << std::endl;
}


void IrisCC::clear()
{
    // cleanup the image plot
    ui->plot_image->clearGraphs();
    ui->plot_image->clearPlottables();

    // cleanup the error plot
    ui->plot_error->clearPlottables();
    ui->plot_error->clearGraphs();
    m_worldPoses.clear();

    // clear images
    m_poseIndices.clear();

    // clear the camera set
    m_cs.cameras().clear();

    // update charts
    updateCameraList();
    updateImageList();
    updateImage(-1);
    updateErrorPlot();
    updatePosesPlot();
}


size_t IrisCC::getPoseId( int row )
{
    // get the camera Id
    if( row >= 0 && row < m_poseIndices.size() )
        return m_poseIndices[ row ];
    else
        return -1;
}


size_t IrisCC::getCameraId( int comboBoxIdx )
{
    // get the camera Id
    int camIdx = 0;
    size_t camId = 0;
    for( auto camIt=m_cs.cameras().begin(); camIt != m_cs.cameras().end(); camIt++ )
    {
        if( comboBoxIdx == camIdx )
        {
            camId = camIt->first;
            break;
        }
        else
            camIdx++;
    }

    return camId;
}


void IrisCC::on_selectCamera()
{
    if( ui->select_camera->currentIndex() < 0 )
        ui->configure_camera->setEnabled(false);
    else
    {
        ui->configure_camera->setEnabled(true);
        updateErrorPlot();
    }
}


void IrisCC::on_configureCamera()
{
    if( ui->select_camera->currentIndex() >= 0 )
    {
        // get the camera
        const iris::Camera_d& cam = m_cs.camera( getCameraId( ui->select_camera->currentIndex() ) );

        // update the dialog
        //ui_CameraConfig->camera_box->setTitle( QString("Camera: \"") + QString::number(cam.id) + QString("\"   (") + QString::number( cam.imageSize(0) ) + "x" + QString::number( cam.imageSize(1) ) + ")" );
        ui_CameraConfig->fx->setValue( cam.intrinsic(0,0) );
        ui_CameraConfig->fy->setValue( cam.intrinsic(1,1) );
        ui_CameraConfig->cx->setValue( cam.intrinsic(0,2) );
        ui_CameraConfig->cy->setValue( cam.intrinsic(1,2) );
        ui_CameraConfig->sensor_width->setValue( cam.sensorSize(0) );
        ui_CameraConfig->sensor_height->setValue( cam.sensorSize(1) );

        // show the dialog
        m_cameraConfigDialog.exec();
    }
}


void IrisCC::on_cameraInfo()
{
    if( m_cs.hasCamera( ui->select_camera->currentIndex() ) )
    {
        // get the camera
        const iris::Camera_d& cam = m_cs.camera( getCameraId( ui->select_camera->currentIndex() ) );

        // camera
        ui_CameraInfo->name->setText( QString::number(cam.id) );
        ui_CameraInfo->image_size->setText( QString::number( cam.imageSize(0) ) + "x" + QString::number( cam.imageSize(1) ) );

        // update the dialog
        ui_CameraInfo->fx->setText( QString::number( cam.intrinsic(0,0) ) );
        ui_CameraInfo->fy->setText( QString::number( cam.intrinsic(1,1) ) );
        ui_CameraInfo->cx->setText( QString::number( cam.intrinsic(0,2) ) );
        ui_CameraInfo->cy->setText( QString::number( cam.intrinsic(1,2) ) );

        // set intrinsic matrix
        std::stringstream sim;
        sim << cam.intrinsic;
        ui_CameraInfo->intrinsic_matrix->setText( QString(sim.str().c_str()) );

        // set the distortion
        ui_CameraInfo->distortion_model->setText( "OpenCV" );
        QString dist;
        for( size_t i=0; i<cam.distortion.size(); i++ )
            dist += QString::number( cam.distortion[i] ) + "\n";
        ui_CameraInfo->distortion_params->setText( dist );

        // f, fov & aspect ratio
        if( cam.sensorSize(0) > 0 && cam.sensorSize(1) > 0 )
        {
            cv::Mat_<double> intrinsic;
            cv::eigen2cv(cam.intrinsic, intrinsic);
            double fovx, fovy, f, ar;
            cv::Point2d pp;
            cv::calibrationMatrixValues( intrinsic,
                                         cv::Size(cam.imageSize(0), cam.imageSize(1)),
                                         cam.sensorSize(0),
                                         cam.sensorSize(1),
                                         fovx, fovy, f, pp, ar);

            ui_CameraInfo->f->setText( QString::number( f ) );
            ui_CameraInfo->fov_x->setText( QString::number( fovx ) );
            ui_CameraInfo->fov_y->setText( QString::number( fovy ) );
            ui_CameraInfo->aspect_ratio->setText( QString::number( ar ) );
        }

        // show the dialog
        m_cameraInfoDialog.exec();
    }
}


void IrisCC::on_acceptConfigureCamera()
{
    if( m_cs.hasCamera( ui->select_camera->currentIndex() ) )
    {
        // get the camera
        iris::Camera_d& cam = m_cs.camera( getCameraId( ui->select_camera->currentIndex() ) );
        cam.intrinsic(0,0) = ui_CameraConfig->fx->value();
        cam.intrinsic(1,1) = ui_CameraConfig->fy->value();
        cam.intrinsic(0,2) = ui_CameraConfig->cx->value();
        cam.intrinsic(1,2) = ui_CameraConfig->cy->value();
        cam.sensorSize(0) = ui_CameraConfig->sensor_width->value();
        cam.sensorSize(1) = ui_CameraConfig->sensor_height->value();
    }
}


void IrisCC::on_configureFinder()
{
    try
    {
        // init stuff
        ui->configure_finder->setEnabled(false);

        // choose what to do
        switch( ui->select_finder->currentIndex() )
        {
            // none
            case 0:
                break;

            case 1 : // chessboard
                ui->configure_finder->setEnabled(true);
                m_finderDialogs[ ui->select_finder->currentIndex() ]->exec();
                break;

#           ifdef UCHIYAMARKERS_FOUND
            case 2 : // uchiyama
                ui->configure_finder->setEnabled(true);
                m_finderDialogs[ ui->select_finder->currentIndex() ]->exec();
                break;
#           endif

            // not supported finder
            default:
                throw std::runtime_error("IrisCC::on_configure_finder: Finder not supported.");
        }
    }
    catch( std::exception &e )
    {
        critical( e.what() );
    }
}


void IrisCC::on_configureCalibration()
{
    try
    {
        // init stuff
        ui->configure_calibration->setEnabled(false);

        // choose what to do
        switch( ui->select_calibration->currentIndex() )
        {
            // none
            case 0 :
                break;

            case 1 : // OpenCV Single
            case 2 : // OpenCV Stereo
                ui->configure_calibration->setEnabled(true);
                m_calibrationDialogs[ ui->select_calibration->currentIndex() ]->exec();
                break;

            // not supported finder
            default:
                throw std::runtime_error("IrisCC::on_configureCalibration: Calibration not supported.");
        }
    }
    catch( std::exception &e )
    {
        critical( e.what() );
    }
}


void IrisCC::on_load()
{
    try
    {
        QStringList imagePaths = QFileDialog::getOpenFileNames(this, "Load Images", ".", "Images (*.bmp *.png *.xpm *.jpg *.tif *.tiff)");

        // return fi nothing there
        if( imagePaths.size() == 0 )
            return;

        // init progress dialog
        QProgressDialog progress("Loading Images...", " ", 0, imagePaths.size(), this);
        progress.setWindowModality(Qt::WindowModal);
        progress.setCancelButton(0);
        progress.show();

        // load the images
        for( int i=0; i<imagePaths.size(); i++ )
        {
            // load the current image to RGB888
            QImage imageQt;
            imageQt.load( imagePaths[i] );
            imageQt = imageQt.convertToFormat( QImage::Format_RGB32 ).copy();

            // convert to CImg
            std::shared_ptr< cimg_library::CImg<uint8_t> > image( new cimg_library::CImg<uint8_t>( imageQt.width(), imageQt.height(), 1, 3 ) );
            for( int y=0; y<imageQt.height(); y++ )
            {
                for( int x=0; x<imageQt.width(); x++ )
                {
                    QColor col( imageQt.pixel(x,y) );
                    (*image)(x,y,0,0) = col.red();
                    (*image)(x,y,0,1) = col.green();
                    (*image)(x,y,0,2) = col.blue();
                }
            }

            // add image
            m_cs.add( image,
                      QFileInfo( imagePaths[i] ).fileName().toStdString(),
                      static_cast<size_t>( ui->cameraID->value() ) );

            // update progress
            progress.setValue(i);
        }

        // tidy up progress bar
        progress.setValue(imagePaths.size());

        // update the image list
        updateImageList();
        updateCameraList();
    }
    catch( std::exception &e )
    {
        critical( e.what() );
    }
}


void IrisCC::on_clear()
{
    QMessageBox::StandardButton response = QMessageBox::warning( this,
                                                                 QString(),
                                                                 "Clear all images?",
                                                                 QMessageBox::Yes | QMessageBox::No );
    if( QMessageBox::Yes == response )
        clear();
}


void IrisCC::on_erase()
{
    if( m_cs.poseCount() > 0 )
    {
        QMessageBox::StandardButton response = QMessageBox::warning( this,
                                                                     QString(),
                                                                     "Clear image?",
                                                                     QMessageBox::Yes | QMessageBox::No );
        if( QMessageBox::Yes == response )
        {
            int row = ui->image_list->currentRow();
            if(  m_cs.hasPose( m_poseIndices[row] ) )
            {
                m_cs.erase( m_poseIndices[row] );
                updateImageList();
                updateErrorPlot();
                updatePosesPlot();
                updatePosesPlotCurrent();
            }
        }
    }
}


void IrisCC::on_calibrate()
{
    calibrate();
}


void IrisCC::on_save()
{
    try
    {
        // get an output filename
        QString filename = QFileDialog::getSaveFileName(this, "Save Calibration", "calibration.xml", "Iris Camera Calibration XML (*.xml)");

        m_cs.save( filename.toStdString(), ui->save_images->isChecked() );
    }
    catch( std::exception &e )
    {
        critical( e.what() );
    }
}


//void IrisCC::on_inputChanged( int page )
//{
//    if( 1 == page )
//        on_cameraOpen();
//    else
//        on_cameraClose();
//}


//void IrisCC::on_cameraOpen()
//{
//    if( !m_videoCapture.isOpened() )
//    {
//        m_videoCapture.open(0);
//        if( !m_videoCapture.isOpened() )
//        {
//            ui->capture_frame->setEnabled(false);
//            critical("IrisCC::on_cameraOpen: could not open camera.");
//        }
//        else
//            ui->capture_frame->setEnabled(true);
//    }
//    else
//        warning("IrisCC::on_cameraOpen: camera already open.");
//}


//void IrisCC::on_cameraClose()
//{
//    if( !m_videoCapture.isOpened() )
//        m_videoCapture.release();
//    else
//        warning("IrisCC::on_cameraClose: camera not open.");
//}


//void IrisCC::on_capture()
//{
//    if( m_videoCapture.isOpened() )
//    {
//        cv::Mat imageCV;
//        m_videoCapture >> imageCV;
//        cv::cvtColor(imageCV, imageCV, cv::COLOR_BGR2RGB);

//        std::shared_ptr< cimg_library::CImg<uint8_t> > image( new cimg_library::CImg<uint8_t> );
//        iris::cv2cimg<uint8_t,3>( imageCV, *image );

//        // assemble name
//        std::stringstream ss;
//        ss << "frame_" << m_cs.poseCount();
//        m_cs.add( image, ss.str() );
//    }
//    else
//        warning("IrisCC::on_capture: camera not open.");
//}


void IrisCC::on_detectedImageChanged( int idx )
{
    updateImage( idx );
    updateErrorPlot();
    updatePosesPlotCurrent();
}
